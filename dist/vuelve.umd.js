(function(t,s){typeof exports=="object"&&typeof module<"u"?module.exports=s(require("vue"),require("lodash.clonedeep")):typeof define=="function"&&define.amd?define(["vue","lodash.clonedeep"],s):(t=typeof globalThis<"u"?globalThis:t||self,t.vuelve=s(t.Vue,t.cloneDeep))})(this,function(t,s){"use strict";const j=e=>typeof e=="function",{isArray:w}=Array,O={mounted:t.onMounted,beforeUpdate:t.onBeforeUpdate,updated:t.onUpdated,beforeUnmount:t.onBeforeUnmount,unmounted:t.onUnmounted,errorCaptured:t.onErrorCaptured,renderTracked:t.onRenderTracked,renderTriggered:t.onRenderTriggered,activated:t.onActivated,deactivated:t.onDeactivated,serverPrefetch:t.onServerPrefetch};function k(e){return function(...y){let f={},u={},h={},E={};const o={};if(e.props){const n=w(e.props),r=n?e.props:Object.keys(e.props),d=c=>Object.values(e.props)[c];y==null||y.forEach((c,a)=>{if(n){const i=e.props[a];i&&(f={...f,[i]:c})}else{const i=r[a],p=d(a);if(i&&p){if(c.constructor.name!==p.name)throw new TypeError(`Invalid prop: type check failed for prop "${i}". Expected ${p==null?void 0:p.name}, got ${c.constructor.name}`);f={...f,[i]:c}}}})}if(e.data&&j(e.data)){const n=e.data();Object.entries(n).forEach(([r,d])=>{const c=t.ref(s(d));u={...u,[r]:c}})}return Object.assign(o,u,f),e.methods&&Object.entries(e.methods).forEach(([n,r])=>{h={...h,[n]:r.bind(o)}}),Object.assign(o,h),Object.entries(O).forEach(([n,r])=>{const d=n;if(e[d]){const c=e[d];r((...a)=>c.apply(o,a))}}),e.watch&&Object.entries(e.watch).forEach(([n,r])=>{const d=r,c=o[n];c&&t.watch(c,d.bind(o))}),e.watchEffect&&Object.values(e.watchEffect).forEach(n=>{const r=n;t.watchEffect(r.bind(o))}),e.computed&&Object.keys(e.computed).forEach(n=>{const r=e.computed&&e.computed[n];r&&(E={...E,[n]:t.computed(r.bind(o))})}),{...f,...u,...h,...E}}}return k});
